plugins {
    id 'com.github.johnrengelman.shadow'
    id "me.shedaniel.unified-publishing"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    modImplementation "dev.architectury:architectury-neoforge:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')

    implementation "mod.azure.azurelib:azurelib-neo-${minecraft_version}:${azurelib_version}"
    modApi "me.shedaniel.cloth:cloth-config-neoforge:${rootProject.cloth_config_version}"
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/neoforge.mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}

unifiedPublishing {
    project {
        displayName = "Mythos Bestiary $project.version"
        gameVersions = ["${minecraft_version}"]
        gameLoaders = ["fabric"]
        releaseType = "release" // Optional, use "release", "beta" or "alpha"
        changelog = rootProject.file("changelog.md").text

        mainPublication tasks.remapJar // Declares the publicated jar

        relations {
            depends {
                curseforge = "architectury-api"
                modrinth = "architectury-api"
            }
            depends {
                curseforge = "azurelib"
                modrinth = "azurelib"
            }
        }

        var cfToken = System.getenv("CURSEFORGE_TOKEN")
        if (cfToken != null) {
            curseforge {
                token = cfToken
                id = "699989" // Required, must be a string, ID of CurseForge project
            }
        }

        var mrToken = System.getenv("MODRINTH_TOKEN")
        if (mrToken != null) {
            modrinth {
                token = mrToken
                id = "avrKhvsK" // Required, must be a string, ID of Modrinth project
            }
        }
    }
}
